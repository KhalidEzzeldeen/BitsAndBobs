function output = HW05KalmCont(input)

%Part (iii):  Calculate the Kalman Gain, get S

%Should be able to use BVP solver to get S, since this works when provided
%with a final value for the function.  No need to re-write S in terms of
%different variables and use ode45.
solinit = bvpinit(linspace(Start,Stop,Stop-Start+1),Guess);
Ssol = bvp4c(@SOdeFunc, @SBCFunc, solinit);

%Part (iv):  Simulate the system using the Kalman Gain calculated from part
%(iii)

xSol = ode45(@(t,y)SimxWKalm(t,y,Ssol), [0,10], 4);

%Make plot for uSol and xSol..
color = {'-b+','-ro','--b*','--rx',':bd',':rs','-.bv','-.r^'};
tint = linspace(Start,Stop);
U = deval(uSol, tint,2);
X = deval(xSol, tint);
figure;
title({'\fontsize{16} Control from Kalman and';...
        'Simulated x Trajectory using Control'});
xlabel('\fontsize{13} Timestep');
ylabel('\fontsize{13} Position / Control');
hold on
plot(tint,U,color{4},...
     tint,X,color{5},...
     Stop, U(end), color{6},...
     Stop, X(end), color{7});
legend('\fontsize{13} Control',...
       '\fontsize{13} Trajectory',...
      ['\fontsize{13} Control at t=10:  ' num2str((round(U(end)*1000))/1000)],...
      ['\fontsize{13} Pos at t=10:  ' num2str((round(X(end)*1000))/1000)],...
       'Location','Best');
hold off

%Part (vi):  simulate the open loop system with delta function

Delta = inline('4*(t>2).*((3-2)/2-abs(t-2.5)).*(t<3)', 't');
xSolDel = ode45(@(t,y)SimxWKalmIn(t,y,Ssol,Delta), [0,10], 4);


%Functions for finding the initial value of S
function dy = SOdeFunc(~,y,~)
dy = -2*y(1)*.5 + y(1)^2*(9/6);
   
function res = SBCFunc(~, yb)
res = yb(1) - 10;

%Functions for simulating x traj. with the Kalman Gain, feedback
function dy = SimxWKalm(t,y,Ssol)
S = (1/2)*deval(Ssol, t);
dy = (0.5 + 3*S)*y(1);

%Function with inline input to feed into ode45 for simulating 'x'
function dy = SimxWKalmIn(t,y,Ssol,F)
S = (1/2)*deval(Ssol, t);
dy = (0.5 + 3*S)*y(1) + F(t);